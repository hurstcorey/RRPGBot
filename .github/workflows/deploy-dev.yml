name: Deploy Development Environment

on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: 'Development environment name'
        required: true
        default: 'dev'
        type: string
      region:
        description: 'AWS region for deployment'
        required: true
        default: 'us-east-2'
        type: string
  push:
    branches:
      - develop
    paths-ignore:
      - '**.md'
      - 'documentation/**'

env:
  AWS_REGION: ${{ github.event.inputs.region || 'us-east-2' }}
  ENVIRONMENT_NAME: ${{ github.event.inputs.environment_name || 'dev' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Amplify CLI
        run: npm install -g @aws-amplify/cli

      - name: Initialize Amplify environment
        run: |
          amplify env add ${{ env.ENVIRONMENT_NAME }} \
            --yes \
            --region ${{ env.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy backend
        run: |
          amplify push --yes
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get deployment outputs
        id: outputs
        run: |
          # Get the CloudFormation stack outputs
          STACK_NAME=$(amplify env get --name ${{ env.ENVIRONMENT_NAME }} --json | jq -r '.awscloudformation.StackName')
          echo "stack_name=$STACK_NAME" >> $GITHUB_OUTPUT
          
          # Get the Amplify App ID
          AMPLIFY_APP_ID=$(amplify env get --name ${{ env.ENVIRONMENT_NAME }} --json | jq -r '.awscloudformation.AmplifyAppId')
          echo "amplify_app_id=$AMPLIFY_APP_ID" >> $GITHUB_OUTPUT
          
          # Get the API endpoint
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`GraphQLAPIEndpointOutput`].OutputValue' \
            --output text)
          echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Development Environment Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Stack Name:** ${{ steps.outputs.stack_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Amplify App ID:** ${{ steps.outputs.amplify_app_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**API Endpoint:** ${{ steps.outputs.api_endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Test the API endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- Verify authentication flow" >> $GITHUB_STEP_SUMMARY
          echo "- Check S3 storage access" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To terminate this environment, use the 'Terminate Development Environment' workflow." >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'push' && github.event.head_commit.message != ''
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Development Environment Deployed')
            );
            
            const commentBody = `## ðŸš€ Development Environment Deployed Successfully!
            
            **Environment:** ${{ env.ENVIRONMENT_NAME }}
            **Region:** ${{ env.AWS_REGION }}
            **Stack Name:** ${{ steps.outputs.stack_name }}
            **Amplify App ID:** ${{ steps.outputs.amplify_app_id }}
            **API Endpoint:** ${{ steps.outputs.api_endpoint }}
            
            ### Next Steps:
            - Test the API endpoints
            - Verify authentication flow
            - Check S3 storage access
            
            To terminate this environment, use the 'Terminate Development Environment' workflow.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }